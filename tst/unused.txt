function getRandomQuestion() {
    // Get probability sum
    let sum = 0;
    for(let i in tierProbability){
        sum += tierProbability[i];
    }

    // Generate random difficulty
    function generateRandomDifficulty() {
        let value = Math.random() * sum;
        for (let randomDifficulty in tierProbability) {
            value -= tierProbability[randomDifficulty];

            if (value <= 0) {
                console.log("Random Difficulty = " + randomDifficulty);
                return randomDifficulty;
            }
        }
    }

    // Generate random question
    function generateRandomQuestion() {
        let questionCount, randomQuestion;
        switch(quizTier) {
            case 1:
                questionCount = questionCount_ve;
                break;
            case 2:
                questionCount = questionCount_e;
                break;
            case 3:
                questionCount = questionCount_m;
                break;
            case 4:
                questionCount = questionCount_h;
                break;
            case 5:
                questionCount = questionCount_vh;
                break;
        }
        randomQuestion = Math.floor((Math.random() * questionCount) + 1);
        console.log("Random Question = " + randomQuestion);
        return randomQuestion;
    }

    // Parse question index
    function parseIndex() {
        difficultyIndex = randomDifficulty - 1;
        questionIndex = randomQuestion - 1;
    }

    let randomDifficulty = generateRandomDifficulty();
    let randomQuestion = generateRandomQuestion();
    parseIndex()
}

let category = "general";
let tier = "veryEasy";
let field = "choice";
let index1 = 0, index2 = 0;

console.log(data["category_" + category][index1]["difficulty_" + tier][index2][field][2]);


// Fires during document load
document.addEventListener("DOMContentLoaded", 
    // Retrieves and saves user data to global variables
    function() {
        let userData = getData("userData");
        quizTier = userData.quizTier;
        quizCategory = userData.quizCategory;
        quizLength = userData.quizLength;
        quizDuration = userData.quizDuration;
        tierProbability = userData.tierProbability;
        console.log("[SYSTEM]: User data saved to global variables" + " (" + getTime() + ").");

        // Populates question data when preload is necessary
        if (userData.preloadNeeded) {
            loadQuiz();
            userData.preloadNeeded = false;
            saveData("userData", userData);
            console.log("[SYSTEM]: Question data preload complete" + " (" + getTime() + ").");
        }
    }
);



const questionCount = {
    general: {veryEasy: 0, easy: 0, medium: 0, hard: 0, veryHard: 0},
    gameMechanics: {veryEasy: 0, easy: 0, medium: 0, hard: 0, veryHard: 0},
    craftingRecipes: {veryEasy: 0, easy: 0, medium: 0, hard: 0, veryHard: 0},
    updatesHistory: {veryEasy: 0, easy: 0, medium: 0, hard: 0, veryHard: 0},
    electrics: {veryEasy: 0, easy: 0, medium: 0, hard: 0, veryHard: 0}
};

switch(userData.quizCategory) {
            case "general":
                switch(randomDifficulty) {
                    case "veryEasy": questionIndexRange = questionCount.general.veryEasy; break;
                    case "easy": questionIndexRange = questionCount.general.easy; break;
                    case "medium": questionIndexRange = questionCount.general.medium; break;
                    case "hard": questionIndexRange = questionCount.general.hard; break;
                    case "veryHard": questionIndexRange = questionCount.general.veryHard; break;
                }
                break;
           case "gameMechanics":
                switch(randomDifficulty) {
                    case "veryEasy": questionIndexRange = questionCount.gameMechanics.veryEasy; break;
                    case "easy": questionIndexRange = questionCount.gameMechanics.easy; break;
                    case "medium": questionIndexRange = questionCount.gameMechanics.medium; break;
                    case "hard": questionIndexRange = questionCount.gameMechanics.hard; break;
                    case "veryHard": questionIndexRange = questionCount.gameMechanics.veryHard; break;
                }
                break;
            case "craftingRecipes":
                switch(randomDifficulty) {
                    case "veryEasy": questionIndexRange = questionCount.craftingRecipes.veryEasy; break;
                    case "easy": questionIndexRange = questionCount.craftingRecipes.easy; break;
                    case "medium": questionIndexRange = questionCount.craftingRecipes.medium; break;
                    case "hard": questionIndexRange = questionCount.craftingRecipes.hard; break;
                    case "veryHard": questionIndexRange = questionCount.craftingRecipes.veryHard; break;
                }
                break;
             case "updatesHistory":
                switch(randomDifficulty) {
                    case "veryEasy": questionIndexRange = questionCount.updatesHistory.veryEasy; break;
                    case "easy": questionIndexRange = questionCount.updatesHistory.easy; break;
                    case "medium": questionIndexRange = questionCount.updatesHistory.medium; break;
                    case "hard": questionIndexRange = questionCount.updatesHistory.hard; break;
                    case "veryHard": questionIndexRange = questionCount.updatesHistory.veryHard; break;
                }
                break;
            case "electrics":
                switch(randomDifficulty) {
                    case "veryEasy": questionIndexRange = questionCount.electrics.veryEasy; break;
                    case "easy": questionIndexRange = questionCount.electrics.easy; break;
                    case "medium": questionIndexRange = questionCount.electrics.medium; break;
                    case "hard": questionIndexRange = questionCount.electrics.hard; break;
                    case "veryHard": questionIndexRange = questionCount.electrics.veryHard; break;
                }
                break;
        }


indexData["nextIndex"][categoryIndex][difficultyIndex] = indexData["nextIndex"][categoryIndex][difficultyIndex] + 1;
let nextIndex = indexData["nextIndex"][categoryIndex][difficultyIndex];
indexData["generatedIndexes"][categoryIndex][difficultyIndex][nextIndex - 1] = questionIndex;

document.addEventListener("DOMContentLoaded", function() {getElement("").addEventListener("click", "functionName");});

getElement("continue").disabled = true;

function initializeData(id) {
    if (id === "indexData") {
        let obj = { 
            generatedIndexes: {
                1: {1: [], 2: [], 3: [], 4: [], 5: []},
                2: {1: [], 2: [], 3: [], 4: [], 5: []},
                3: {1: [], 2: [], 3: [], 4: [], 5: []},
                4: {1: [], 2: [], 3: [], 4: [], 5: []},
                5: {1: [], 2: [], 3: [], 4: [], 5: []},
                6: {1: [], 2: [], 3: [], 4: [], 5: []},
                7: {1: [], 2: [], 3: [], 4: [], 5: []}
            },
            nextIndex: {
            1: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            2: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            3: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            4: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            6: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            7: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            5: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
            }
        }
        localStorage.setItem("indexData", JSON.stringify(obj));
        console.log("[SYSTEM]: Index data, generated indexes initialized" + " (" + getTime() + ").");
    }
}

function clearData() {
    localStorage.removeItem("quizData")
    localStorage.removeItem("indexData")
    console.log("[SYSTEM]: User data cleared from local storage" + " (" + getTime() + ").");
}

function saveData(id, obj) {
    if (id === "quizData") {
        localStorage.setItem("quizData", JSON.stringify(obj));
        console.log("[SYSTEM]: User data saved to local storage" + " (" + getTime() + ").");
    }
    else if (id === "indexData") {
        localStorage.setItem("indexData", JSON.stringify(obj));
        console.log("[SYSTEM]: Index data saved to local storage" + " (" + getTime() + ").");
    }
}
function getData(id) {
    let obj = {};
    if (id === "quizData" && typeof localStorage.quizData !== "undefined") {
        obj = JSON.parse(localStorage.quizData);
    } 
    else if (id === "indexData" && typeof localStorage.quizData !== "undefined") {
        obj = JSON.parse(localStorage.indexData);
    }
    return obj;
}

if (typeof localStorage.sessionData === "undefined") initializeData("sessionData");

/*
// instantiate object
let sessionData = new Session();
Session.setData(sessionData);
console.log(sessionData);

sessionData.newProperty = 1;

// Set data
Session.setData(sessionData);

// Get data
let test = Session.getData(localStorage.getItem("sessionData"));
console.log(test);

// clear data
Session.clearData();
console.log(localStorage.sessionData);
*/

function assignIndexes(id) {
    let sessionData = Session.getData(localStorage.getItem("sessionData"));
    switch(sessionData.categoryIndex) {
        case 1: category = "generalKnowledge"; break;
        case 2: category = "gameMechanics"; break;
        case 3: category = "craftingRecipes"; break;
        case 4: category = "creatureBehaviors"; break;
        case 5: category = "blocksPickables"; break;
        case 6: category = "updatesHistory"; break;
        case 7: category = "electrics"; break;
    }
    switch(sessionData.difficultyIndex) {
        case 1: difficulty = "veryEasy"; break;
        case 2: difficulty = "easy"; break;
        case 3: difficulty = "medium"; break;
        case 4: difficulty = "hard"; break;
        case 5: difficulty = "veryHard"; break;
    }
}

switch(parsedString) {
        case "tier": sessionData.quizTier = parsedInt; break;
        case "ctgr": sessionData.quizCategory = parsedInt; break;
        case "lgth": sessionData.quizLength = parsedInt; break;
        case "drtn": sessionData.quizDuration = parsedInt; break;
    }


function initializeSetup(id) {
    let sessionData = Session.getData(localStorage.getItem("sessionData"));
    let parsedString = id.slice(0,4);
    
    // Update button states
    if (typeof sessionData[parsedString + "State"] == "undefined") {
        getElement(id).disabled = true;
        sessionData[parsedString + "State"] = id;
    } 
    else if (typeof sessionData[parsedString + "State"] !== "undefined" && id !== sessionData[parsedString + "State"]) {
        getElement(id).disabled = true;
        getElement(sessionData[parsedString + "State"]).disabled = false;
        sessionData[parsedString + "State"] = id;
    }
    Session.setData(sessionData);
}

// Update button states
    if (typeof sessionData[parsedString + "State"] == "undefined") {
        getElement(id).disabled = true;
        sessionData[parsedString + "State"] = id;
    } 
    else if (typeof sessionData[parsedString + "State"] !== "undefined" && id !== sessionData[parsedString + "State"]) {
        getElement(id).disabled = true;
        getElement(sessionData[parsedString + "State"]).disabled = false;
        sessionData[parsedString + "State"] = id;
    }
    Session.setData(sessionData);

// Load button states
        if (typeof sessionData.isActive == "undefined"){
            if (typeof sessionData.tierState !== "undefined") {
                getElement(sessionData.tierState).disabled = true;
            }
            if (typeof sessionData.ctgrState !== "undefined") {
                getElement(sessionData.ctgrState).disabled = true;
            }
            if (typeof sessionData.lgthState !== "undefined") {
                getElement(sessionData.lgthState).disabled = true;
            }
            if (typeof sessionData.drtnState !== "undefined") {
                getElement(sessionData.drtnState).disabled = true;
            }
        }

        function test() {
    let questionData = getData();
    questionString = questionData["category_" + 6]["difficulty_" + 1][5]["question"];
    console.log(questionString);
}

class Session {
    constructor() {
        this.activeQuestion = 1;
        this.quizState = 1;
        this.generatedIndexes = {
            1: {1: [], 2: [], 3: [], 4: [], 5: []},
            2: {1: [], 2: [], 3: [], 4: [], 5: []},
            3: {1: [], 2: [], 3: [], 4: [], 5: []},
            4: {1: [], 2: [], 3: [], 4: [], 5: []},
            5: {1: [], 2: [], 3: [], 4: [], 5: []},
            6: {1: [], 2: [], 3: [], 4: [], 5: []},
            7: {1: [], 2: [], 3: [], 4: [], 5: []}
        }
        this.nextIndex = {
            1: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            2: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            3: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            4: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            6: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            7: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
            5: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
        }
        this.buttonStates = {
            tier: {id: "", state: 0},
            ctgr: {id: "", state: 0},
            lgth: {id: "", state: 0},
            drtn: {id: "", state: 0}
        }
        this.answerState = {
            state: "", id: ""
        }
    }
    static setData(parsedJSON) {
        localStorage.setItem("sessionData", JSON.stringify(parsedJSON));
    }
    static getData(serializedJSON) {
        return Object.assign(new Session(), JSON.parse(serializedJSON));
    }
    static clearData() {
        localStorage.removeItem("sessionData");
    }
}

function preloadContent(functionID) {
        const preload_setupPage = function() {
            sessionData.setupPreloadNeeded = false;
            // ... ()
        }
        const preload_quizPage = function() {
            sessionData.quizPreloadNeeded = false;
            $("btn-continue").prop("disabled", true);
            generateQuestion();
            loadData("question");
            // ... (load timer)
        }
        const preload_resultsPage = function() {
            sessionData.resultsPreloadNeeded = false;
            let lengthString, pointsString = 0;
            switch(sessionData.quizLength) {
                case 1: lengthString = "10"; break;
                case 2: lengthString = "20"; break;
                case 3: lengthString = "30"; break;
            }
            $("inf-points").val(pointsString);
            $("inf-accuracy").val(sessionData.questionsRight + "/" + lengthString);
        }
        // Sequence
        switch(functionID) {
            case 1: preload_setupPage(); break;
            case 2: preload_quizPage(); break;
            case 3: preload_resultsPage(); break;
        }
        updateSessionData("save");
    }

    // Check and load HTML value
        if (sessionData["pageElements"][pageID]["node_" + nodeIndex]["elementValue"] !== "") {
            switch(elementType) {
                case "paragraph": loadHTMLValue(); break;
                case "heading": loadHTMLValue(); break;
                case "span": loadHTMLValue(); break;
            }   
        }
        // Check and load button states
        if (sessionData["pageElements"][pageID]["node_" + nodeIndex]["elementValue"] !== "") {

        }      
        // Check and load class list
        if (sessionData["pageElements"][pageID]["node_" + nodeIndex]["classID"] !== "") {
            loadClassList();
        }
        // Check and load visibility state
        if (sessionData["pageElements"][pageID]["node_" + nodeIndex]["isVisible"] !== 0) {
            loadVisibilityState();
        }


const quizQuestionMax = {
    1: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
    2: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
    3: {1: 10, 2: 19, 3: 26, 4: 25, 5: 20},
    4: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
    5: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
};

      <h2>Setup Quiz</h2>
        <h3>Difficulty Tier</h3>
        <p>Determines the average difficulty of each question.</p>
        <div>
            <input class="btn-tier" id="tier_1" type="button" value="Beginner"></input>
            <input class="btn-tier" id="tier_2" type="button" value="Intermediate"></input>
            <input class="btn-tier" id="tier_3" type="button" value="Experienced"></input>
            <input class="btn-tier" id="tier_4" type="button" value="Veteran"></input>
        </div>
        <div>
            <input class="btn-tier-rdm" id="tier_5" type="button" value="RANDOM"></input>
            <p style="font-size: 0.75rem">* Selecting Random will choose a random difficulty tier upon start.</p>
        </div>
        <h3>Question Category</h3>
        <p>Determines what topics questions will cover.</p>
        <div>
            <input class="btn-category" id="ctgr_1" type="button" value="General Knowledge"></input>
            <input class="btn-category" id="ctgr_2" type="button" value="Game Mechanics"></input>
            <input class="btn-category" id="ctgr_3" type="button" value="Updates History"></input>
            <input class="btn-category" id="ctgr_4" type="button" value="Electrics"></input>
        </div>
        <div>
            <input class="btn-category-rdm" id="ctgr_5" type="button" value="RANDOM">
            </input>
            <p style="font-size: 0.75rem">* Selecting Random will choose a random category every question.</p>
        </div>
        <h3>Question Count</h3>
        <p>Determines the total number of questions.</p>
        <div>
            <input class="btn-length" id="lgth_1" type="button" value="Low"></input>
            <input class="btn-length" id="lgth_2" type="button" value="Medium"></input>
            <input class="btn-length" id="lgth_3" type="button" value="High"></input>
        </div>
        <div>
            <input class="btn-length-rdm" id="lgth_4" type="button" value="RANDOM"></input>
            <p style="font-size: 0.75rem">* Selecting Random will choose a random question count upon start.</p>
        </div>
        <h3>Time Limit</h3>
        <p>Determines the amount of time allotted.</p>
        <div>
            <input class="btn-duration" id="drtn_1" type="button" value="Easy"></input>
            <input class="btn-duration" id="drtn_2" type="button" value="Medium"></input>
            <input class="btn-duration" id="drtn_3" type="button" value="Hard"></input>
            <input class="btn-duration" id="drtn_4" type="button" value="None"></input>
        </div>
        <div>
            <input class="btn-duration-rdm" id="drtn_5" type="button" value="RANDOM"></input>
            <p style="font-size: 0.75rem">* Selecting Random will choose a random time limit upon start.</p>
        </div>
        <h3>Start Quiz</h3>
        <div>
            <input class="btn-start" type="button" id="start" value="Start" 
                onclick="startQuiz()">
            </input>
            <input class="btn-exit" type="button" id="back" value="Back" 
                onclick="exitSetup()">
            </input> 
            <input class="btn-reset" type="button" id="reset" value="Reset" 
                onclick="resetSetup()">
            </input>
            <p style="font-size: 0.75rem">* Click Reset to clear all selected options.</p>
        </div>


.color_1, .color_2, .color_3 {
    float: left;
    margin-left: 3px;
    margin-right: 3px;
    width: 30px;
    height: 30px;
}
.color_1 {
    background-color: #17C402;
}
.color_2 {
    background-color: #159c06;
}
.color_3 {
    background-color: #075d0d;
}
.color_4 {
    background-color: #f44336;
}

.elm-error-time {
    font-family: 'Rubik';
    font-size: 0.7rem;
    position: relative;
    bottom: 1.5px;
}
.elm-error-time_hidden {
    display: none;
}

#outer-container {
    position: fixed;
    inset: 0px;
    width: 500px;
    height: 500px;
    margin: auto;
}

<div>
            <h2 class="elm-title">Survivalcraft Trivia</h2>
            <p class="elm-question" id="question"></p>
            <div>
                <input class="btn-choice" type="button" id="choice_1" value="" onclick="gradeQuiz(this.id)"></input>
            </div>
            <div>
                <input class="btn-choice" type="button" id="choice_2" value="" onclick="gradeQuiz(this.id)"></input>
            </div>
            <div>
                <input class="btn-choice" type="button" id="choice_3" value="" onclick="gradeQuiz(this.id)"></input>
            </div>
            <div>
                <input class="btn-choice" type="button" id="choice_4" value="" onclick="gradeQuiz(this.id)"></input>
            </div> 
            <div class="elm-error-time_hidden" id="error_time">
                <i style="color: #f44336; margin-left: 5px" class="fa fa-exclamation-circle" aria-hidden="true"></i>
                <span class="elm-error-time">Time is up. No points will be awarded for this question, regardless if it is correct or not.</span>     
            </div>
            <div>
                <input style="margin-left: 5px" class="btn-continue" type="button" id="continue" value="Continue" onclick="continueQuiz(this.id)"></input>
                <input style="margin-left: 3px" class="btn-quit" type="button" id="quit" value="Quit" onclick="stopQuiz(this.id)"></input>
            </div>
        </div>
        <div style="margin-top: 15px; margin-left: 3px">
            <span style="font-weight: 500;">Tier</span>
            <span> = </span>
            <span id="inf-tier"></span>
        </div>
        <div style="margin-top: 15px; margin-left: 3px">
            <span style="font-weight: 500;">Category</span>
            <span> = </span>
            <span id="inf-category"></span>
        </div>
        <div style="margin-top: 15px; margin-left: 3px">
            <span style="font-weight: 500;">Difficulty</span>
            <span> = </span>
            <span id="inf-difficulty"></span>
        </div>
        <div style="margin-top: 15px; margin-left: 3px">
            <span style="font-weight: 500;">Progress</span>
            <span> = </span>
            <span id="inf-progress"></span>
        </div>
        <div style="margin-top: 15px; margin-left: 3px">
            <span style="font-weight: 500;">Time Left</span>
            <span> = </span>
            <span id="inf-time"></span>
        </div>

$(".setup-button-group_1 input").on({
  click: function(){
    sessionData.pageElements.setup.node_3.isActive = false;
    updateSessionData("save");
    loadDocument("setup", "load_partial", [3]);
  }
});

$(".setup-button-group_2 input").on({
  click: function(){
    sessionData.pageElements.setup.node_4.isActive = false;
    updateSessionData("save");
    loadDocument("setup", "load_partial", [4]);
  }
});

$("#btn-test-reset").on({
  click: function(){
    sessionData.pageElements.setup.node_3.isActive = true;
    sessionData.pageElements.setup.node_4.isActive = true;
    updateSessionData("save");
    loadDocument("setup", "load_partial", [3,4]);
  }
});

// $("#").on("click", functionName);


#QUIZ_CONTAINER_GRID {
  display: grid;
  justify-items: center;
  align-items: center;
  grid-template-columns: 1fr 500px 1fr;
  grid-template-rows: 0.25fr 0.75fr 20px 40px 40px 40px 40px 40px 1fr;
  row-gap: 15px;
  width: 100%;
  min-height: 100vh;
}



#QUIZ_TEXT_HEADING_quitConfirm {
  font-family: "Rubik";
  text-align: center;
  font-weight: 500;
  font-size: 0.8rem;
  margin: 4px 0 12px 0;
}
#QUIZ_TEXT_PARAGRAPH_quitConfirm {
  font-family: "Rubik";
  text-align: center;
  font-weight: 400;
  font-size: 0.6rem;
  margin-bottom: 12px;
}
#QUIZ_CONTAINER_MODAL_BACKGROUND_quitConfirm {
  display: none;
  position: fixed;
  overflow: auto;
  z-index: 1;
  left: 0;
  top: 0;
  
  width: 100%;
  height: 100%;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4);
}
#QUIZ_CONTAINER_MODAL_CONTENT_quitConfirm {
  position: fixed;
  margin: auto;
  inset: 0;
  
  width: 200px;
  height: 80px;
  padding: 20px;
  border: 1px solid #888;
  border-radius: 5px;
  background-color: #fefefe;
}


#QUIZ_DIVISION_MODAL_buttonGroup_1 {

}